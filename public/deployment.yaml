title: Deployment Service API
version: "0.1"
description: >
  This service implements the entities that are needed to perform deployments of software. The same service is used to deploy customer software (proxies/bundles/Node.js apps) 
  to the Apigee cloud as well as Apigee infrastructure components (message processors, routers, SSO, Edge management server and so on) to the AWS cloud. In the future,
  this service will support deployment of both customer software and Apigee software to an Apigee-managed Kubernetes cloud.
consumes: application/json
produces: application/json text/html
conventions:
  patch_consumes: application/merge-patch+json
  error_response:
    type: string
entities:
  Environment:
    description: >
      An environment represents a set of running components accessible at a single domain name or IP address. Depending on the context, an environment might correspond to:
      <ul>
        <li> A set of Apigee Message Processors that handle the same set of customer domain names. (This is similar to the existing Apigee "pod" concept)</li>
        <li> A set of customer proxies deployed to the same Apigee "environment" </li>
        <li> A set of Apigee routers deployed to the same AWS region/AZ </li>
        <li> A Kubernetes cluster or namespace dedicated to a domain name belonging to an Apigee customer or Apigee itself. </li>
      </ul>
      The state of an Environment is controlled by POSTing requests to the URL provided in its requests property
      The Deployment Service stores Environments that are currently (intended to be) running, but also stores Environments that once ran, and Environments that will run in the future.
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          The value must always be the string "Environment". This property is always set 
          by the server in responses to GET. It must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [Environment]
      realizes:
        description: >
          The the URI of the System of which this Environment is a running examplar. 
          This property is always set by the server in responses to GET.
          It must be set by the client on POST, and may only be set by the client on PATCH
          if the requested_state is initial. (PUT is not supported) 
        format: uri
        type: string
        relationship: '#System'
      comprises:
        description: >
          The URI of the collection of Deployments that are part of this Environment. 
          This property is always set by the server, and is readOnly for the client 
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Deployment'
      domain_name:
        description: The URI of the domain name at which this Environment can be found. 
        type: string
      description:
        description: A description of the Environment 
        type: string
      requested_state:
        description: >
          The requested, or 'desired' state of the Environment. A string (URLs would be cooler) 
          representing the last requested state of the Deployment. This property is always set by 
          the server in responses to GET. It may never be set directly by the client. Clients affect 
          the value of requested_state by POSTing requests to the URL in the requests property. 
        type: string
        readOnly: true
        enum: [initial, running, stopped, retired]
      valid_requests:
        description: > 
          A list of valid requests given the current requested_state. This property is always set 
          by the server, and is readOnly for the client
        type: array
        readOnly: true
        items:
          type: string
          format: uri
          enum: [EnvironmentStartRequest, EnvironmentStopRequest, EnvironmentRetirementRequest]
      requests:
        description: >
          The  URI of the collection of Requests for this Environment. New requests can be POSTed 
          to this collection to change the requested (desired) state of the Environment.
          These requests will typically change the state of the runtime. Valid request types are:
          EnvironmentStartRequest EnvironmentStopRequest EnvironmentRetirementRequest 
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#EnvironmentStartRequest #EnvironmentStopRequest #EnvironmentRetirementRequest'  
  EnvironmentStartRequest:
    description: >
      An EnvironmentStartRequest is used to initiate the creation of the runtime infrastructure
      required by an Environment. It can only be used if the requested_state of the Environment is initial or stopped
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "EnvironmentStartRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [EnvironmentStartRequest]    
  EnvironmentRetirementRequest:
    description: >
      An EnvironmentRetirementRequest is used to retire an Environment that is no longer needed.
      required by an Environment. It can only be used if the requested_state of the Environment is initial or stopped
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "EnvironmentStopRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [EnvironmentRetirementRequest]    
  EnvironmentStopRequest:
    description: >
      An EnvironmentStopRequest is used to delete the runtime infrastructure
      required by an Environment. It can only be used if the requested_state of the Environment is running
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "EnvironmentStopRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [EnvironmentStopRequest]    
  Deployment:
    description: >
      A deployment represents a set of running instances of the same component. Each deployment runs in an environment. Depending on the context, a deployment might correspond to:
      <ul>
        <li> An auto-scaling group for Message Processors running in an AWS region </li>
        <li> A Kubernetes replicationController in a Kubernetes namespace/cluster </li>
        <li> The deployment of a single customer proxy in an Edge environment. </li>
      </ul>
       The Deployment Service stores Deployments that are currently (intended to be) running, but also stores Deployments that once ran, and Deployments that will run in the future.
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "Deployment". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [Deployment]
      deploys:
        description: >
          The URI of the Revision that the deployment executes. This property is always set by the 
          server in responses to GET. It must be set by the client on POST, and must not be set 
          by the client on PATCH. (PUT is not supported) 
        format: uri
        type: string
        relationship: '#Revision'
      runs_in:
        description: >
          The URI of the Environment that the deployment is part of. This property is always set by 
          the server in responses to GET. It must be set by the client on POST, and must not be set 
          by the client on PATCH. (PUT is not supported) 
        format: uri
        type: string
        relationship: '#Environment'
      requested_state:
        description: >
          The requested, or 'desired' state of the Deployment. The value is a string (URLs would be cooler) 
          representing the last requested state of the Deployment. This property is always set by the server 
          in responses to GET. It may never be set directly by the client. Clients affect the value of 
          requested_state by POSTing requests to the URL in the requests property. 
        type: string
        readOnly: true
        enum: [initial, stopped, offline, online, temporarily_online]
      requested_replicas:
        type: integer
        readOnly: true
      requested_hosts:
        type: string
        readOnly: true
      requested_percentage:
        type: number
        minimum: 0
        maximum: 100
        readOnly: true
      valid_requests:
        description:  > 
          A list of valid requests given the current requested_state. This property is always set 
          by the server, and is readOnly for the client
        type: array
        items:
          type: string
          format: uri
          enum: [DeploymentStartRequest, DeploymentStopRequest, DeploymentOnlineRequest, 
                 DeploymentOfflineRequest, DeploymentStatisticsRequest, 
                 DeploymentScalingRequest, DeploymentRetirementRequest]
      requests:
        description: >
          The URI of the collection of Requests for this Deployment. New requests can be POSTed to this 
          collection to change the requested (desired) state of the Deployment. These requests will 
          typically change the state of the runtime. Valid request types are: DeploymentStartRequest 
          DeploymentStopRequest DeploymentOnlineRequest DeploymentOfflineRequest 
          DeploymentStatisticsRequest DeploymentScalingRequest DeploymentRetirementRequest 
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: > 
            #DeploymentStartRequest #DeploymentStopRequest #DeploymentOnlineRequest #DeploymentOfflineRequest 
            #DeploymentStatisticsRequest #DeploymentScalingRequest #DeploymentRetirementRequest
  DeploymentStartRequest:
    description: >
      An DeploymentStartRequest is used to initiate the creation of the runtime infrastructure
      required by an Deployment. It can only be used if the requested_state of the Deployment is initial or stopped.
      A successful DeploymentStartRequest will change the requested_state of the Deployment to offline
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind: 
        description: >
          This value must always be the string "DeploymentStartRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentStartRequest]    
      replicas:
        type: integer
  DeploymentStopRequest:
    description: >
      An DeploymentStopRequest is used to delete the runtime infrastructure
      required by an Deployment. It can only be used if the requested_state of the Deployment is offline
      A successful DeploymentStopRequest will change the requested_state of the Deployment to stopped
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "DeploymentStopRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentStopRequest]    
  DeploymentOfflineRequest:
    description: >
      An DeploymentOfflineRequest is used to stop any traffic going to [instances of] the deployment.
      It can only be used if the requested_state of the Deployment is online.
      A successful DeploymentStopRequest will change the requested_state of the Deployment to offline
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "DeploymentOfflineRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentOfflineRequest]    
  DeploymentOnlineRequest:
    description: >
      An DeploymentOnlineRequest is used to direct traffic to a deployment. The optional hosts and 
      percentage properties can be used to control which traffic and how much of it.
      A successful DeploymentOnlineRequest will change the requested_state of the Deployment to online.
      DeploymentOnlineRequest can only be used if the requested_state of the Deployment is offline.
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "DeploymentOnlineRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentOnlineRequest]   
      hosts:
        type: string
      percentage:
        type: number
        minimum: 0
        maximum: 100
  DeploymentStatisticsRequest:
    description: >
      A DeploymentStatisticsRequest is used to direct traffic to a deployment for a limited period of time.
      A DeploymentStatisticsRequest is like a DeploymentOnlineRequest that times out. During a DeploymentStatisticsRequest
      the requested_state of the Deployment will be set to temporarily_online. At the end of successful 
      DeploymentStatisticsRequest, the requested_state will revert to offline.
      A successful DeploymentStopRequest will change the requested_state of the Deployment back to offline.
      DeploymenStatisticsRequest can only be used if the requested_state of the Deployment is offline.
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "DeploymentStatisticsRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentStatisticsRequest]
      hosts:
        description: >
          The value is a space-separated list of domain names or IP addresses. If this property is provided, then only
          traffic originating from those clients will be forwarded to this deployment. 
        type: string
      percentage:
        description: >
          If present, this value specifies the percentage of traffic this deployment should receive. If no value is given
          for this property, the instances correspopnding to this deployment will be added to the general load-balancer pool
          and so will receive traffic in proportion to the total number of instance or load, depending on the load-balancer algorithm.
          This property may be used in conjunction with the hosts field to select traffic based on both hostnames and percentages. 
        type: number
        minimum: 0
        maximum: 100
      duration:
        type: integer
      state:
        type: string
      results:
        type: string
        format: uri
        relationship: '#StatisticsResults'
    readOnly: true
  DeploymentScalingRequest:
    description: A DeploymentScalingRequest is used to increase or decrease the number of replicas associated with a deployment 
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "DeploymentScalingRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentScalingRequest]  
      replicas: 
        type: integer
    readOnly: true
  DeploymentRetirementRequest:
    description: > 
      A DeploymentScalingRequest is used to mark a Deployment as no longer being current. After a Deployment has been
      marked as retired, it can be deleted, or it can be kept around as a historic record.
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          This value must always be the string "DeploymentRetirementRequest". The kind property is always set by 
          the server in responses to GET. The kind property must be set by the client on POST, 
          and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [DeploymentRetirementRequest]    
  System:
    description: >
      A System represents a set of Components that work together. Systems are defined in development. Systems
      are deployed by creating Environments that run them. Multiple Environments may run the same System. 
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        description: >
          The value must always be the string "System". The kind property is always set by the server in responses to GET.
          The kind property must be set by the client on POST, and must not be set by the client on PATCH. (PUT is not supported) 
        type: string
        enum: [System]
      has_environments:
        description: >
          The value of the has_environments property is the URI of the collection of Environments where this System is deployed. 
          New Environments can be POSTed to this collection—alternatively, 
          a new Environment can be added to the collection by creating the Environment with a value of 'realizes' that references this System.
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Environment'
      has_components:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Component'
  Component:
    description: >
      A Component is a unit of implementation that can be indpeendently deployed. Components are aggregated into systems.
      Components are deployed by creating a Deployment entity inside some Environment for a particular Revision of the Component,
      and then issuing a DeploymentStartRequest for that Deployment.  
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        type: string
        enum: [Component]
      is_component_of:
        format: uri
        type: string
        relationship: '#System'
      has_revisions:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Revision'
  Revision:
    description: >
      Revisions model successive snapshots of an implementation Component, as produced by a Development organization. 
    allOf:
    - $ref: './common.yaml/#/entities/PersistentResource'
    properties:
      kind:
        type: string
        enum: [Revision]
      revises:
        format: uri
        type: string
        relationship: '#Component'
      has_deployments:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Deployment'        
  StatisticsResults:
    description: >
      A StatisiticsResult is an entity that holds the metrics produced during a DeploymenStatisticsRequest. 
    type: object
    readOnly: true
  Apigee:
    description: >
      An Apigee is the root of the tree of resources in an Apigee Environment (that is, an Environment that contains Apigee's own software)
    readOnly: true
    well_known_URLs: /
    query_paths: systems environments components revisions
    properties:
      systems:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#System'        
      environments:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Environment'        
      components:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Component'        
      revisions:
        format: uri
        type: string
        readOnly: true
        relationship:
          collection_resource: './common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Revision'
securityDefinitions:
  sso:
    type: oauth2
    scopes: {}
    flow: password
    tokenUrl: whatever
security:
- sso: []