id: https://apigee.com/apis/1
title: Permissions API
entities:
  Permissions:
    description: >
      <p>A Permissions resource contains one Permissions entity nested inside another.
      The outer of these Permissions entities controls who can send GET, PUT/PATCH, POST and DELETE requests to some other 
      resource that belongs to some other Apigee microservice.
      The nested Permissions entity controls who can read and alter the outer one.
      
      The resource to which access is governed by this Permission entity is called the "governed resource" 
      and its URL is in the `governs` property of the outer Permissions entity. The `create`, `retrieve`, `update` and `delete` properties of the outer Permissions entity 
      each (optionally) contain arrays of users, groups and teams that
      may perform the associated action on the governed resource. The Permissions service makes no assumptions about the governed resource—it may not even exist. 
      The value of the `self` property of the outer Permissions entity is the same as the URL of the enclosing resource, 
      and the outer Permissions entity has the typical creator/created/modifier/modified properties.
      <p>
      The outer Permissions entity may also have a `sharingSets` property. If set, this property will contain an array (conceptually a set) of URLs. Each of these URLs may have its own Permissions entity in another
      Permissions document that grants access to that URL. The create/retrieve/update/delete values from those other Permissons entities are unioned with those of the current Permissions entity, recursively, to determine the total sharing permissions granted for the
      governed resource. The Permissions service makes no assumptions about the sharingSet resources themselves—they may not even exist, even though their Permissions documents do.
      <p>
      The outer Permissions entity may have a `permissions` property whose value is a nested Permissions entity.
      The nested Permissions entity specifies who can read, alter and delete the entire Permission resource, including both Permissions entities. 
      The `governs` property of the nested Permissions entity will contain the URL of the outer Permissions entity. The
      nested Permissons entity does not have a sharingSet property, but instead uses the sharingSet value of the first Permissions 
      entity in its hierarchical search unioning permissions. When unioning permissions for the nested Permissions entity,
      the unioning is with the nested Permissions entities of the sharingSets, not the outer ones. The nested Permissions
      entity does not have creator/created/modifier/modified properties. The nested Permissions entity may be missing entirely—in that case 
      the sharingSet permissions of the outer Permissions document will be used to determine who can change the outer Permission entity.
      <p>
      The value of the `self` property of the nested Permissions entity will extend the value of the `self` property of the first 
      by adding a fragment identifier. This ensures that a GET
      on either `self` value will always retrive the same enclosing resource.
      <p>
      If no Permissions entity exists for a resource, it is ungoverned. Anyone can do anything to an ungoverned resource,
      including creating a Permissions entity for it, thereby preventing others from accessing it. When new resources are created by Apigee microservices, they should
      always create a corresponding Permissions entity for it. The most common Permissions entity for a new resource will include the
      new resource in a sharingset rather than assigning specific permissions. 
    allOf:
    - $ref: common.yaml#/entities/PersistentResource
    properties:
      isA:
        type: string
        enum: [Permissions]
      governs:
        type: string
        format: uri
        usage: c
      sharingSets:
        type: array
        items:
          type: string
          format: uri
      create:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
      retrieve:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
      update:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
      delete:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
      permissions:
        $ref: '#/entities/PermissionsOfPermissions'
  PermissionsOfPermissions:
    description: >
      PermissionsOfPermissions is a slightly more restricted version of the <a href="#Permissions">Permissions</a> resource used to psecify who can see and change permissions for a resource.
    allOf:
    - $ref: common.yaml#/entities/Resource
    properties:
      isA:
        type: string
        enum: [Permissions]
      governs:
        type: string
        format: uri
        usage: c
      retrieve:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
      update:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
      delete:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group teams.yaml#Team'
  Resource: 
    readOnly: true
  ResourceList:
    description: A space-delimited list of URLs
    type: string
  AllowedActions:
    readOnly: true
    type: string
    URI_templates:
      template: /allowed-actions{?resource,user}
      variables:
        resource:
          description: >
            This query parameter specifies the "governed" resource whose AllowedActions are returned 
          type: string
          format: uri
          required: true
        user:
          description: >
            This query parameter specifies the user whose AllowedActions are returned. The requesting user must be the same as the specified user.
          type: string
          format: uri
          required: true
  ActionIsAllowed:
    readOnly: true
    type: boolean
    URI_templates:
      template: /action-is-allowed{?resource,user,action}
      variables:
        resource:
          description: >
            This query parameter specifies the "governed" resource whose ActionIsAllowed is returned 
          type: string
          format: uri
          required: true
        user:
          description: >
            This query parameter specifies the user whose ActionIsAllowed is returned. The requesting user must be the same as the specified user.
          type: string
          format: uri
          required: true
        action:
          description: >
            This query parameter specifies the action whose ActionIsAllowed is returned. The requesting user must be the same as the specified user.
          type: string
          format: uri
          required: true
  Apigee:
    id: common.yaml#Apigee
    readOnly: true
    wellKnownURLs: /
    query_paths: permissions resources-shared-with users-who-can-see resources-in-sharingset
    properties:
      permissions:
        format: uri
        type: string
        readOnly: true
        relationship:
          collectionResource: 'common.yaml/#MultiValuedRelationship'
          multiplicity: 0:n
          entities: '#Permissions'        
          query_parameters:
            resource:
              description: >
                This query parameter specifies the "governed" resource whose Permissions reosurce is returned 
              type: string
              format: uri
              required: true
      resources-shared-with:
        format: uri
        type: string
        readOnly: true
        relationship:
          entities: '#Resource'
          multiplicity: 0:n
          collectionResource: '#ResourceList'
          readOnly: true
          query_parameters:
            user:
              type: string
              format: uri
              required: true
      users-who-can-see:
        format: uri
        type: string
        readOnly: true
        relationship:
          entities: users.yaml#User
          multiplicity: 0:n
          collectionResource: '#ResourceList'
          readOnly: true
          query_parameters:
            resource:
              type: string
              format: uri
              required: true
      resources-in-sharingset:
        format: uri
        type: string
        readOnly: true
        relationship:
          entities: '#Resource'
          multiplicity: 0:n
          collectionResource: '#ResourceList'
          readOnly: true
          query_parameters:
            sharingSet:
              type: string
              format: uri
                        