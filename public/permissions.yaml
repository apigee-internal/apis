title: Permissions API
entities:
  Permissions:
    description: >
      A Permissions resource is a bit tricky to understand, so pay attention. The representation of this resource is an array containing two entities, both of them Permissions entities.<p>
      
      The first of these Permissions entities controls who can do what to some other resource that belongs to some other Apigee microservice. The resource to which access is governed by this Permissions
      entity is called the "governed resource" and its URL is in the `governs` property of the Permissions entity. The `create`, `retrieve`, `update` and `delete` properties each (optionally) contain arrays of users, groups and teams that
      may perform the associated action on the governed resource. The Permissions service makes no assumptions about the governed resource—it may not even exist. The value of `self` property of the first Permissions entity
      is the same as the URL of the enclosing resource, and the first Permissions entity has the typical creator/created/modifier/modified properties.<p>
      
      The first Permissions entity may also have a `sharingSets` property. If set, this property will contain an array (conceptually a set) of URLs. Each of these URLs may have its own Permissions entity in another
      Permissions document that grants access to that URL. The create/retrieve/update/delete values from those other Permissons entities are unioned with those of the current Permissions entity, recursively, to determine the total sharing permissions granted for the
      governed resource. The Permissions service makes no assumptions about the sharingSet resources—they may not even exist.<p>
      
      The second Permissions entity in the array specifies who can access the first. The `governs` property of the second Permissions entity will contain the URL of the first Permissions entity. The
      second Permissons entity does not have a sharingSet property, but instead uses the sharingSet value of the first Permissions entity in its hierarchical search unioning permissions. The second Permissions
      entity does not have creator/created/modifier/modified properties.<p>
      
      For programming convenience, we will keep the first Permissions entity in the first position of the array and the second permissions entity in the second position of the array. However, it is
      easy to tell which is which without relying on the array position: the value of the `governs` property of the second will always match the value of the `self` property of the first, which will also match the URL
      of the enclosing resource. The value of the `self` property of the second will extend the value of the `self` property of the first by adding a fragment identifier. This ensures that a GET
      on either `self` value will always get to the same enclosing resource.
    type: array
    minItems: 2
    maxItems: 2
    items:
      oneOf:
      - $ref: '#/entities/FirstPermissions'
      - $ref: '#/entities/SecondPermissions'
  FirstPermissions:
    allOf:
    - $ref: common.yaml#/entities/PersistentResource
    properties:
      kind:
        type: string
        enum: [Permissions]
      governs:
        type: string
        format: uri
      sharingSets:
        type: array
        items:
          type: string
          format: uri
      create:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
      retrieve:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
      update:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
      delete:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
  SecondPermissions:
    allOf:
    - $ref: common.yaml#/entities/Resource
    properties:
      kind:
        type: string
        enum: [Permissions]
      governs:
        type: string
        format: uri
      create:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
      retrieve:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
      update:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
      delete:
        type: array
        items:
          type: string
          format: uri
          relationship: 'users.yaml#User users.yaml#Group #Team'
  Team:
    allOf:
    - $ref: common.yaml#/entities/PersistentResource
    properties:
      kind:
        type: string
        enum: [Team]
      title:
        type: string
      users:
        type: array
        items:
          type: string
          format: uri
          relationship: users.yaml#User      