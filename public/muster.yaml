title: Teams API
version: "0.1"
consumes: application/json
produces: application/json text/html
conventions:
  patchConsumes: application/merge-patch+json
  error_response:
    type: string
entities:
  System:
    allOf:
    - $ref: '#/entities/Resource'
    properties:
      isA:
        type: string
        enum: [System]
      groups:
        description: URL of a Collection of Groups
        format: uri
        type: string        
        relationship:
          collectionResource: '#MultiValuedRelationshipResource'
          entities: '#Group'
          multiplicity: O:n
          queryParameters:
          - name: folder
            type: array
            format: uri
            required: false
    wellKnownURLs: /system
    queryPaths: 
    - groups
    readOnly: true
  Group:
    allOf:
    - $ref: '#/entities/PersistentResource'
    properties:
      members:
        description: Array of URLs of Users
        type: array
        items:
          type: string
          format: uri
      folder:
        description: URL of a Folder
        format: uri
        type: string
        relationship: '#Folder'
      isA:
        type: string
        enum: [Group]
      name:
        type: string
      permissions:
        type: array
        items: 
          properties:
            actor:
              format: URL
              type: string
            action:
              type: string
  Page:
    allOf:
    - $ref: '#/entities/Resource'
    properties:
      isA:
        type: string
        enum: [Page]
      items:
        type: array
        items: 
          type: object
      collection:
        type: string
        format: uri
      next_page:
        type: string
        format: uri
        relationship:
          entities: '#Page'
          readOnly: True
      previous_page:
        type: string
        format: uri
        relationship:
          entities: '#Page'
          readOnly: True
    queryParameters:
    - name: properties
      items:
        type: string
      type: array
      required: false
    - name: limit
      type: integer
      minimum: 1
      maximum: 1000
      required: false
    readOnly: true
  Folder: {}
  Collection:
    allOf:
    - $ref: '#/entities/Resource'
    properties:
      isA:
        type: string
        enum: [Collection]
      items:
        type: array
        items: 
          type: object
    queryParameters:
    - name: properties
      items:
        type: string
      type: array
      required: false
    - name: limit
      type: integer
      minimum: 1
      maximum: 1000
      required: false
    - name: orderBy # required if limit is provided
      type: string
      required: false
    - name: direction
      type: string
      required: false
      enum: ['ascending', 'descending']
    readOnly: true
  MultiValuedRelationshipResource:
    readOnly: true
    oneOf:
      - $ref: '#/entities/Collection'
      - $ref: '#/entities/Page'
  Resource:
    type: object
    properties:
      self:
        type: string
        readOnly: true
      isA:
        type: string
  PersistentResource:
    allOf:
    - $ref: '#/entities/Resource'
    properties:
      created:
        type: string
        format: date-time
        readOnly: true
      creator:
        type: string
        format: URL
        readOnly: true
      modified:
        type: string
        format: date-time
        readOnly: true
      modifier:
        type: string
        format: date-time
        readOnly: true
implementation_only:
  Group:
    instance_url:
      template: /c3Rvc-Z3Jw-{} 
      key:
        name: implementation_key
        type: integer
securityDefinitions:
  sso:
    type: oauth2
    scopes: {}
    flow: application
    tokenUrl: whatever
security:
- sso: []
