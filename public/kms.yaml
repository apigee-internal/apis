title: KMS APIs
conventions:
  selector_location: path-segment
entities:
  Apigee:
    well_known_URLs: /
    query_paths: 
    - organizations 
    - organizations;{name} 
    - organizations;{name}/environments 
    - organizations;{name}/apiproducts 
    - organizations;{name}/apps 
    - organizations;{name}/companies
    - organizations;{name}/apis
    properties:
      organizations:
        description: The base entity for an account on Apigee Edge, an organization is a container for all managed entities, including APIs, API products, developers, apps, environments, etc.
        type: string
        format: uri
        relationship:
          multiplicity: 0:n
          entities: '#Organization'
          collection_resource: './common.yaml#MultiValuedRelationship'
  Organization:
    description: >
      The base entity for an account on Apigee Edge, an organization is a container for all managed entities, including APIs, API products, developers, apps, environments, etc.
    allOf:
    - $ref: ./common.yaml#/entities/PersistentResource
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "Organization"
        type: string
        enum: [Organization]
      name:
        description: >
          The name of the Organization. Must be unique
        type: string
        usage: c u
      description:
        description: >
          A textual description of the Organization
        type: string
      displayName:
        description: >
          The name to be used to display to humans for this Organization. Used in the UI.
        type: string
      type:
        description: >
          Type of the Organization which describe whether it's a trial or revenue Organization
        type: string
        enum: [trial, revenue]
      properties:
        description: internal or custom properties
        type: array
        items:
          additionalProperties:
            type: string
      apis:
        description: An API facade (and an API proxy configuration) which will be deployed in the environment(s)
        type: string
        format: uri
        relationship:
          multiplicity: 0:n
          entities: '#Proxy'
          collection_resource: './common.yaml#MultiValuedRelationship'
      environments:
        description: An environment represents a set of running components accessible at a single namespace
        type: string
        format: uri
        relationship:
          multiplicity: 0:n
          entities: "#Environment"
          collection_resource: './common.yaml#MultiValuedRelationship'
      apiproducts:
        description: An API product which represents one or more REST endpoints
        type: string
        format: uri
        relationship:
          multiplicity: 0:n
          entities: '#ApiProduct'
          collection_resource: './common.yaml#MultiValuedRelationship'
      apps:
        description: Apps are API consumers registered with an API provider's organization. Apps are registered with an organization to obtain credentials that enable access to one or more API products (or, a set of URIs). The default app profile can be extended by using custom attributes. Apps can be associated with developers (as developer apps) or with companies (company apps).
        type: string
        format: uri
        relationship:
          multiplicity: 0:n
          entities: '#App'
          collection_resource: './common.yaml#MultiValuedRelationship'
      companies:
        description: A company is a collection of developers managed as a single entity. A company can be any grouping that is appropriate to your organization, e.g., business unit, product line, or division. Grouping developers into companies is useful when your goal is to work with multiple developers associated under a single corporate entity for billing purposes, for example. However, it not required that the developers in your organization are associated with a company. This API is completely optional. Note that a developer is always a single entity, uniquely identified by the email element.
        type: string
        format: uri
        relationship:
          multiplicity: 0:n
          entities: '#Company'
          collection_resource: './common.yaml#MultiValuedRelationship'
  Proxy:
    description: >
      An API facade (and an API proxy configuration) which will be deployed in the environment(s)
    properties:
      isA:
        description: The value of this property indicates the 'isA' or 'type' of the object. Its value must be the string "Proxy"
        type: string
        enum: [Proxy]
      name:
        description: >
          The name of the API
        type: string
  Environment:
    description: >
      An environment represents a set of running components accessible at a single namespace
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "ENVIRONMENT"
        type: string
        enum: [Environment]
      name:
        description: >
          The name of the Environment. Must be unique within the pertaining Organization
        type: string
      description:
        description: >
          A textual description of the Environment
        type: string
      displayName:
        description: >
          The name to be used to display to humans for this Environment. Used in the UI.
        type: string
      properties:
        description: A list of properties
        type: array
        items:
          additionalProperties:
            type: string
  ApiProduct:
    description: >
      API products enable you to bundle and distribute your APIs to multiple developer groups simultaneously, without having to modify code. An API product consists of a list of API resources (URIs) combined with a Service Plan (rate-limiting policy settings) plus any custom metadata required by the API provider. API products provide the basis for access control in Apigee, since they provide control over the set of API resources that apps are allowed to consume.
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "APIPRODUCT"
        type: string
        enum: [ApiProduct]
      name:
        description: >
          The name of the API product. Must be unique within the pertaining Organization
        type: string
      description:
        description: >
          A textual description of the API Product
        type: string
      displayName:
        description: >
          The name to be used to display to humans for this API Product. Used in the UI.
        type: string
      organization:
        description: The name of the Organization (URL would have been better)
        type: string
      attributes:
        description: A list of custom key/value pair
        type: array
        items:
          $ref: ./kms-common.yaml#/entities/Attribute
      apiResources:
        description: A comma separated list of API resources to be bundled in the API Product.
        type: array
        items:
          type: string
      environments:
        description: Names of environments where this API is available. Defines the domain names where the paths of the API will be available
        type: array
        items:
          type: string
      scopes:
        description: > 
          A comma separated list of scopes. These must map to the scopes defined in an Oauth policy associated with the API Product. Any scope mismatch between an Acces Token presented and the API Product results in auth failure.
        type: array
        items:
          type: string
      proxies:
        description: Name of an API facade (and an API proxy configuration) which will be deployed in the environment(s)
        type: array
        items:
          type: string
      quota:
        description: The number of request messages permitted by this API product for the specified quotaInterval and quotaTimeUnit
        $ref: ./kms-common.yaml#/entities/Quota
      approvalType:
        description: If manual, consumer key is generated and returned in 'pending' state. If auto consumer key generated and returned in 'Approved' state
        type: string
        enum: [manual, auto]
      appCredentials:
        description: A list of token keys for an app
        type: array
        items:
          $ref: '#/entities/AppCredential'
  App:
    description: >
      Apps are API consumers registered with an API provider's organization. Apps are registered with an organization to obtain credentials that enable access to one or more API products (or, a set of URIs). The default app profile can be extended by using custom attributes. Apps can be associated with developers (as developer apps) or with companies (company apps).
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "APP"
        type: string
        enum: [App]
      appId:
        description: uniquely generated ID
        type: string
      name:
        description: >
          The name of the App. Must be unique within the pertaining Organization
        type: string
      organization:
        description: The name of the Organization the App is in
        type: string
      accessType:
        type: string
      callbackUrl:
        type: string
        format: uri
      status:
        description: status of an App
        type: string
        enum: [approved, revoked, pending]
      appFamily:
        description: >
          App families enable you to create functional groups of apps. A single app may be instantiated in several forms. For example, an app may have sandbox instance and a production instance. App families enable these app instances to be associated. You can do this by linking the instances of the app together in a an app family collection. Specify an app family name, associate that name with a developer or a company of your organization, and select one or more app IDs to add to the contents of the app family. You can create app families for developer apps or for company apps within your organization.
        type: string
      appType:
        description: A type relfects whether this belongs to Company or Developer
        type: string
        enum: [Company, Developer]
      appParent:
        description: The name of the parent app 
        type: string
      attributes:
        description: A list of custom key/value pair
        type: array
        items:
          $ref: ./kms-common.yaml#/entities/Attribute
      scopes:
        description: > 
          Defines the OAUTH scopes to which this APIProduct gives access
        type: array
        items:
          type: string
      appCredentials:
        type: array
        items: 
          $ref: '#/entities/AppCredential'
  AppCredential:
    description: A token key for an app
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "APPCRENDENTIAL"
        type: string
        enum: [AppCredential]
      id:
        description: a unique identifier
        type: string
      consumerKey:
        description: a key or client ID for Oauth
        type: string
      consumerSecret:
        description: a client secret for Oauth
        type: string
      apiProduct:
        description: A list of names of ApiProducts
        type: array
        items:
          type: string
  Company:
    description: >
      A company is a collection of developers managed as a single entity. A company can be any grouping that is appropriate to your organization, e.g., business unit, product line, or division. Grouping developers into companies is useful when your goal is to work with multiple developers associated under a single corporate entity for billing purposes, for example. However, it not required that the developers in your organization are associated with a company. This API is completely optional. Note that a developer is always a single entity, uniquely identified by the email element.
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "COMPANY"
        type: string
        enum: [Company]
      organization:
        description: The name of the organization that this company consumes products from
        type: string
      name:
        description: A name of the Company
        type: string
      displayName:
        description: >
          The name to be used to display to humans for this API Product. Used in the UI.
        type: string
      status:
        description: status
        type: string
        enum: [active, inactive, login_lock]
      apps:
        description: A list of names of apps that belongs to this company
        type: array
        items:
          description: The name of the app. Better would be to put the URL of the app
          type: string
      developers:
        description: A list of names of developers that belongs to this company
        type: array
        items:
          description: The name of the developer. Better would be to put the URL of the developer
          type: string
      attributes:
        description: A list of custom key/value pair
        type: array
        items:
          $ref: ./kms-common.yaml#/entities/Attribute
  Developer:
    description: >
      A developer within an organization who is associated with a company. The company developer creates apps on behalf of the company, and any apps created by a company developer are associated with the company and known as 'company apps'. The Company Developers API enables you to add developers to companies. A developer must exist in the system before you can associate them with a company.
    properties:
      isA:
        description: The value of this property indicates the 'kind' or 'type' of the object. Its value must be the string "DEVELOPER"
        type: string
        enum: [Developer]
      userId:
        description: A unique identifier
        type: string
      organization:
        description: The name of the organization the developer consumes products from
        type: string
      userName:
        description: user name
        type: string
      firstName:
        description: first name
        type: string
      lastName:
        description: last name
        type: string
      email:
        description: email
        type: string
      encryptedPassword:
        description: hashed password
        type: string
      salt:
        description: the salt for the password
        type: string
      status:
        description: status
        type: string
        enum: [active, inactive, login_lock]
      apps:
        description: A list of apps created by this developer
        type: array
        items:
          description: The name of the App. Better would be to put the URL of the App
          type: string
      companies:
        description: A list of companies this developer belongs to
        type: array
        items:
          description: The name of the Company. Better would be to put the URL of the Company
          type: string
      attributes:
        description: A list of custom key/value pair
        type: array
        items:
          $ref: ./kms-common.yaml#/entities/Attribute
